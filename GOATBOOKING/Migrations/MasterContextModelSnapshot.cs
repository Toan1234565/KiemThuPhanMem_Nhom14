// <auto-generated />
using System;
using GOATBOOKING.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GOATBOOKING.Migrations
{
    [DbContext(typeof(MasterContext))]
    partial class MasterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GOATBOOKING.Models.Booking", b =>
                {
                    b.Property<long>("BookingId")
                        .HasColumnType("bigint")
                        .HasColumnName("booking_id");

                    b.Property<long>("CheckInDate")
                        .HasColumnType("bigint")
                        .HasColumnName("check_in_date");

                    b.Property<long>("CheckOutDate")
                        .HasColumnType("bigint")
                        .HasColumnName("check_out_date");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<decimal>("DepositPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("deposit_price");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_price");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("BookingId")
                        .HasName("pk_Bookings");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("GOATBOOKING.Models.Homestay", b =>
                {
                    b.Property<long>("HomestayId")
                        .HasColumnType("bigint")
                        .HasColumnName("homestay_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("district");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("province");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ward");

                    b.HasKey("HomestayId")
                        .HasName("pk_Homestays");

                    b.HasIndex("UserId");

                    b.ToTable("Homestays");
                });

            modelBuilder.Entity("GOATBOOKING.Models.Photo", b =>
                {
                    b.Property<long>("PhotoId")
                        .HasColumnType("bigint")
                        .HasColumnName("photo_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long>("HomestayId")
                        .HasColumnType("bigint")
                        .HasColumnName("homestay_id");

                    b.Property<string>("NamePhoto")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name_photo");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.HasKey("PhotoId")
                        .HasName("pk_Photos");

                    b.HasIndex("HomestayId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("GOATBOOKING.Models.Review", b =>
                {
                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint")
                        .HasColumnName("review_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long>("HomestayId")
                        .HasColumnType("bigint")
                        .HasColumnName("homestay_id");

                    b.Property<long?>("HomestayId1")
                        .HasColumnType("bigint");

                    b.Property<int>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("rate");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("ReviewId")
                        .HasName("pk_Reviews");

                    b.HasIndex("HomestayId");

                    b.HasIndex("HomestayId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("GOATBOOKING.Models.Room", b =>
                {
                    b.Property<long>("RoomId")
                        .HasColumnType("bigint")
                        .HasColumnName("room_id");

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint")
                        .HasColumnName("booking_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long>("HomestayId")
                        .HasColumnType("bigint")
                        .HasColumnName("homestay_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("room_name");

                    b.Property<int>("RoomType")
                        .HasColumnType("int")
                        .HasColumnName("room_type");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.HasKey("RoomId")
                        .HasName("pk_Rooms");

                    b.HasIndex("BookingId");

                    b.HasIndex("HomestayId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("GOATBOOKING.Models.Service", b =>
                {
                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("service_name");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.HasKey("ServiceId")
                        .HasName("pk_Services");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("GOATBOOKING.Models.ServicesAdvantage", b =>
                {
                    b.Property<long>("HomestayId")
                        .HasColumnType("bigint")
                        .HasColumnName("homestay_id");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.HasKey("HomestayId", "ServiceId")
                        .HasName("pk_Services_advantage");

                    b.HasIndex("ServiceId");

                    b.ToTable("Services_advantage", (string)null);
                });

            modelBuilder.Entity("GOATBOOKING.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone_number");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("pk_Users");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GOATBOOKING.Models.Booking", b =>
                {
                    b.HasOne("GOATBOOKING.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GOATBOOKING.Models.Homestay", b =>
                {
                    b.HasOne("GOATBOOKING.Models.User", "User")
                        .WithMany("Homestays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Users_Homestays");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GOATBOOKING.Models.Photo", b =>
                {
                    b.HasOne("GOATBOOKING.Models.Homestay", "Homestay")
                        .WithMany("Photos")
                        .HasForeignKey("HomestayId")
                        .IsRequired()
                        .HasConstraintName("fk_Photos_Homestays");

                    b.Navigation("Homestay");
                });

            modelBuilder.Entity("GOATBOOKING.Models.Review", b =>
                {
                    b.HasOne("GOATBOOKING.Models.Homestay", null)
                        .WithMany()
                        .HasForeignKey("HomestayId")
                        .IsRequired()
                        .HasConstraintName("fk_Reviews_Homestays");

                    b.HasOne("GOATBOOKING.Models.Homestay", null)
                        .WithMany("Reviews")
                        .HasForeignKey("HomestayId1");

                    b.HasOne("GOATBOOKING.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_Reviews_Users");

                    b.HasOne("GOATBOOKING.Models.User", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("GOATBOOKING.Models.Room", b =>
                {
                    b.HasOne("GOATBOOKING.Models.Booking", "Booking")
                        .WithMany("Rooms")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("fk_Rooms_Bookings");

                    b.HasOne("GOATBOOKING.Models.Homestay", "Homestay")
                        .WithMany("Rooms")
                        .HasForeignKey("HomestayId")
                        .IsRequired()
                        .HasConstraintName("fk_Rooms_Homestays");

                    b.Navigation("Booking");

                    b.Navigation("Homestay");
                });

            modelBuilder.Entity("GOATBOOKING.Models.ServicesAdvantage", b =>
                {
                    b.HasOne("GOATBOOKING.Models.Homestay", "Homestay")
                        .WithMany("ServicesAdvantages")
                        .HasForeignKey("HomestayId")
                        .IsRequired()
                        .HasConstraintName("fk_Services_advantage_Homestays");

                    b.HasOne("GOATBOOKING.Models.Service", "Service")
                        .WithMany("ServicesAdvantages")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("fk_Services_advantage_Services");

                    b.Navigation("Homestay");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("GOATBOOKING.Models.Booking", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("GOATBOOKING.Models.Homestay", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");

                    b.Navigation("ServicesAdvantages");
                });

            modelBuilder.Entity("GOATBOOKING.Models.Service", b =>
                {
                    b.Navigation("ServicesAdvantages");
                });

            modelBuilder.Entity("GOATBOOKING.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Homestays");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
